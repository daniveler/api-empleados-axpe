openapi: 3.0.1

info:
  title: axpe-employees
  description: This API will provide information about employees working in the company Axpe Consulting S.L.
  version: '0.0.3'
  contact: 
    name: Daniel Velerdas Sedano
    email: daniel01velerdas@gmail.com

tags:
  - name: employees
    description: Refers to existing employees from the company

servers:
  - url: 'http://localhost:3000'

paths:
  '/employees':
    get:
      summary: Get a list of employees
      tags:
        - employees
      description: Employees Found
      operationId: get-employees
      parameters:
        - schema:
            type: string
            minLength: 1
            maxLength: 20
          name: employeeName
          in: query
          required: false
          description: Filter for searching employees by name
          
        - schema:
            type: string
            minLength: 1
            maxLength: 50
            pattern: '^(X(-|\.)?0?\d{7}(-|\.)?[A-Z]|[A-Z](-|\.)?\d{7}(-|\.)?[0-9A-Z]|\d{8}(-|\.)?[A-Z])|[A-z0-9]{2,3}[0-9]{6}$'
          name: identificationDocumentValue
          in: query
          required: false
          description: Filter for searching employees by NIF

        - schema:
            type: string
            minLength: 1
            maxLength: 20
          name: status
          in: query
          required: false
          description: Filter for searching employees by status

        - schema:
            type: string
            #minLength: 1
            #maxLength: 20
            enum:
              - DEVELOPMENT
              - TESTING
              - DESIGN
              - MARKETING
              - MAINTENANCE
          name: department
          in: query
          required: false
          description: Filter for searching employees by department
        
      responses:
        '200':
          description: Employees Found
        
        '404':
          description: Employees Not Found
  
  '/employees/{employeeId}':
    parameters:
      - schema:
          type: integer
          format: uuid
        name: employeeId
        in: path
        required: true
        description: Id of an existing employee.
    
    get:
      summary: Get Employee Details by Employee Id
      tags: 
        - employees
      operationId: get-employees-employeeId
      description: Retrieve the information of the employee with the matching employee ID.
      responses:
        '200':
          description: Employee Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
              examples:
                Get Employee Alice Smith:
                  value:
                    id: 123e4567-e89b-12d3-a456-426614174000
                    firstName: Alice
                    lastName: Smith
                    identificationDocument:
                      value: 12345678A
                      documentType: NIF
                    status: INDEFINITE
                    department: DEVELOPMENT
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: Employee Not Found
    
    put:
      summary: Update Employee Information
      operationId: put-employees-employeeId
      tags:
        - employees
      responses:
        '200':
          description: Employee Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
              examples:
                Updated Employee Rebecca Baker:
                  value:
                    id: 123e4567-e89b-12d3-a456-426614174000
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    identificationDocument:
                      value: 12345678A
                      documentType: NIF
                    status: INDEFINITE
                    department: DEVELOPMENT
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: Employee Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing employee given the employee id.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the employee''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch employee properties to update.

    delete:
      summary: Delete Employee 
      operationId: delete-employee-employeeId
      tags:
        - employees
      description: Delete an existing employee.
      responses:
        '200':
          description: Employee Deleted

  '/employee':
    post:
      summary: Create New Employee
      operationId: post-employee
      description: Create a new employee.
      tags: 
        - employees

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                identificationDocument:
                  $ref: '#/components/schemas/IdentificationDocument'
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - identificationDocument
                - email
                - dateOfBirth
            examples:
              Create Employee Bob Fellow:
                value:
                  id: 123f4567-e89a-12d3-a456-426614174000
                  firstName: Bob
                  lastName: Fellow
                  identificationDocument: 
                    value: 23456789B
                    documentType: NIF
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new employee.

      responses:
        '200':
          description: Employee Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
              examples:
                New employee Bob Fellow:
                  value:
                    id: 123f4567-e89a-12d3-a456-426614174000
                    firstName: Bob
                    lastName: Fellow
                    identificationDocument: 
                      value: 23456789B
                      documentType: NIF
                    status: INDEFINITE
                    department: DEVELOPMENT
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken

components:
  schemas:
    Employee:
      title: Employee
      type: object
      description: Represents an employee related to the company.
      example:
        id: 123e4567-e89b-12d3-a456-426614174000
        firstName: Alice
        lastName: Smith
        identificationDocument: 
          value: 12345678A
          documentType: NIF
        status: INDEFINITE
        department: DEVELOPMENT
        email: alice.smith@gmail.com
        dateOfBirth: '1997-10-31'
        emailVerified: true
        signUpDate: '2019-08-24'
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the given employee.
        firstName:
          type: string
          minLength: 1
          description: Name of the employee
        lastName:
          type: string
          minLength: 1
          description: Last names of the employee 
        email:
          type: string
          format: email
          description: Main email adress of the employee
        identificationDocument:
          $ref: '#/components/schemas/IdentificationDocument'
        department:
          type: string
          description: Department of the company where the employee belongs to.
          enum:
            - DEVELOPMENT
            - TESTING
            - DESIGN
            - MARKETING
            - MAINTENANCE
        status:
          type: string
          description: Contractual status of the employee in the company. 
          enum:
            - TRAINEE
            - TEMPORAL
            - INDEFINITE
        dateOfBirth:
          type: string
          format: date
          description: Birthdate of the employee.
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the employee's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the employee was added to the system.
      required:
        - id
        - firstName
        - lastName
        - identificationDocument
        - status
        - email
        - emailVerified

    IdentificationDocument:
      title: IdentificationDocument
      type: object
      description: Represents identification document information, showing the number and the type of document.
      properties:
        value:
          description: ''
          type: string
          pattern: '^(X(-|\.)?0?\d{7}(-|\.)?[A-Z]|[A-Z](-|\.)?\d{7}(-|\.)?[0-9A-Z]|\d{8}(-|\.)?[A-Z])|[A-z0-9]{2,3}[0-9]{6}$'
        documentType:
          description: ''
          type: string
          enum:
            - NIF
            - NIE
            - PASSPORT
      example:
        value: 12345678A
        documentType: NIF
      required:
        - value
            