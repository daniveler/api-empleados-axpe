openapi: 3.0.1

info:
  title: axpe-employees
  description: This API will provide information about employees working in the company Axpe Consulting S.L.
  version: '1.1.0'
  contact: 
    name: Daniel Velerdas Sedano
    email: daniel01velerdas@gmail.com

tags:
  - name: employees
    description: Refers to existing employees from the company

servers:
  - url: 'https://localhost:3000'

paths:
  '/employees':
    get:
      summary: Get a list of employees
      tags:
        - employees
      description: Get a list of all the employees related with the company based on some optional filters.
      operationId: get-employees
      security:
        - OAuth2:
          - read
      
      parameters:
        - schema:
            type: string
            minLength: 1
            maxLength: 50
            enum:
              - NONE
              - NAME
              - IDENTIFICATIONDOCUMENT
              - DEPARTMENT
              - CONTRACTSTATUS
          name: filterBy
          in: query
          required: true
          description: Type of filter you want to apply
          
        - schema:
            type: string
            minLength: 1
            maxLength: 50
          name: filterValue
          in: query
          required: false
          description: Value of the filter you want to apply

        - schema:
            type: integer
            minLength: 1
            maxLength: 50
          name: paginationLimit
          in: query
          required: false
          description: Limit of the number of elements which will by shown for each page of the response

        - schema:
            type: integer
            minLength: 1
            maxLength: 50
          name: paginationOffset
          in: query
          required: false
          description: Number of the page of the response which will be shown

      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/GetEmployees'
        
        '204':
          description: No content

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                Filter Exception:
                  value:
                    code: filterException
                    message: Filter sent is not valid.
                    type: ERROR
                    description: Filter value must not be null for this filter type.
                Pagination Exception:
                  value:
                    code: paginationException
                    message: Pagination parameters sent are not valid
                    type: ERROR
                    description: Pagination limit must be greater than 0
        
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                Server Error:
                  value:
                    code: unexpectedServerError
                    message: An unexpected server error happened
                    type: ERROR
                    description: The server can not answer the request.

    post:
      summary: Create New Employee
      operationId: post-employees
      description: Creates a new employee in the system.
      tags: 
        - employees

      security:
        - OAuth2:
          - write

      parameters:
        - schema:
              type: string
          in: header
          name: Location
          required: true
          description: Field which contains the access token of the API

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPutEmployee'
        description: Post the necessary fields for the API to create a new employee.

      responses:
        '201':
          description: Created

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                Server Error:
                  value:
                    code: unexpectedServerError
                    message: An unexpected server error happened
                    type: ERROR
                    description: The server can not answer the request

  '/employees/{employeeId}':
    parameters:
      - schema:
          type: integer
          minLength: 1
          maxLength: 50
        name: employeeId
        in: path
        required: true
        description: Id of an existing employee
    
    get:
      summary: Get Employee Details by Employee Id
      tags: 
        - employees
      operationId: get-employees-employeeId
      description: Retrieve the information of the employee with the matching employee ID
      security:
        - OAuth2:
          - read
      
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmployee'

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                Employee Not Found Exception:
                  value:
                    code: resourcesNotFoundException
                    message: Resources requested were not found
                    type: ERROR
                    description: Maybe you misspelled the id of the employee or the employee does not exist.

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                Employees Not Found:
                  value:
                    code: unexpectedServerError
                    message: An unexpected server error happened
                    type: ERROR
                    description: The server can not answer the request.
    
    put:
      summary: Update Employee Information
      operationId: put-employees-employeeId
      tags:
        - employees
      description: Update the information of an existing employee given the employee id.

      security:
        - OAuth2:
          - read
          - write
      
      responses:
        '204':
          description: No content
        
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
               Employee Not Found Exception:
                  value:
                    code: resourcesNotFoundException
                    message: Resources requested were not found
                    type: ERROR
                    description: Maybe you misspelled the id of the employee or the employee does not exist

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                Server Error:
                  value:
                    code: unexpectedServerError
                    message: An unexpected server error happened
                    type: ERROR
                    description: The server can not answer the request.
      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPutEmployee'

        description: Update all editable properties from existing employee.

    delete:
      summary: Delete an Employee
      operationId: delete-employees-employeeId
      tags:
        - employees
      description: Delete an existing employee given the employee id.
      
      security:
        - OAuth2:
          - read
          - write
      
      responses:
        '204':
          description: No content

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                Employee Not Found Exception:
                  value:
                    code: resourcesNotFoundException
                    message: Resources requested were not found
                    type: ERROR
                    description: Maybe you misspelled the id of the employee or the employee does not exist

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                Server Error:
                  value:
                    code: unexpectedServerError
                    message: An unexpected server error happened
                    type: ERROR
                    description: The server can not answer the request.
    
  '/employees/validate-email':
    post:
      summary: Validate Employee's email
      operationId: post-employees-validate-email
      description: Validates data related to an employee's email given the employee email.
      tags: 
        - employees

      security:
        - OAuth2:
          - read
          - write

      parameters:
        - schema:
              type: string
              minLength: 1
              maxLength: 50
          in: header
          name: Authorization
          required: true
          description: Field which contains the access token of the API
      
        - schema:
            type: string
            format: uuid
          in: header
          name: X-Request-ID 
          required: true
          description: Identifier of the message

        - schema:
            type: string
            format: email
            minLength: 1
            maxLength: 50
          name: employeeEmail
          in: query
          required: true
          description: Email of the employee to validate

      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema: 
                type:  array
                items: {
                  $ref: '#/components/schemas/GetEmployees'
                }
        
        '202':
          description: Accepted

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                Email Verification Exception:
                  value:
                    code: emailVerificationException
                    message: Email sent is not valid
                    type: ERROR
                    description: The email sent does not have the proper syntax

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                Employee Not Found Exception:
                  value:
                    code: resourcesNotFoundException
                    message: Resources requested were not found
                    type: ERROR
                    description: Maybe you misspelled the email of the employee.

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                Employees Not Found:
                  value:
                    code: unexpectedServerError
                    message: An unexpected server error happened
                    type: ERROR
                    description: The server can not answer the request.

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations

  schemas:
    ItemEmployee:
      title: ItemEmployee
      type: object
      description: Structure created to represent an employee.
      example:
        employeeId: 1
        firstName: Alice
        surname1: Smith
        surname2: Watterson
        email: alice.smith@gmail.com
        phoneNumber: +34 666 666 666
        identificationDocumentValue: 12345678A
        identificationDocumentType: NIF
        nickname: alice
        password: $2a$10$FRDQgZ83i4/E7Edw6cijIu6lRxiBv5GJu5wD8CiRWC19kYTJLMBRe
        department: DEVELOPMENT
        contractStatus: INDEFINITE
        emailVerified: true
        dateOfBirth: '1997-10-31'
        entryDate: '2019-08-24'
      properties:
        employeeId:
          type: integer
          description: Unique identifier for the given employee.
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: Name of the employee
        surname1:
          type: string
          minLength: 1
          maxLength: 50
          description: First surname of the employee 
        surname2:
          type: string
          minLength: 1
          maxLength: 50
          description: Second surname of the employee 
        email:
          type: string
          format: email
          description: Main email adress of the employee
        phoneNumber:
          type: string
          pattern: '^(\+34|0034|34)?[ -]*(6|7)[ -]*([0-9][ -]*){8}$'
          description: Main phone number of the employee
        identificationDocumentValue:
          type: string
          pattern: '^(X(-|\.)?0?\d{7}(-|\.)?[A-Z]|[A-Z](-|\.)?\d{7}(-|\.)?[0-9A-Z]|\d{8}(-|\.)?[A-Z])|[A-z0-9]{2,3}[0-9]{6}$'
          description: Identification document value of the employee
        identificationDocumentType:
          type: string
          enum:
            - NIF
            - NIE
            - PASSPORT
          description: Type of identification document of the employee
        nickname:
          type: string
          description: Nickname used by the employee to login in the system of the company
        password:
          type: string
          format: password
          description: Password used by the employee to login in the system of the company
        department:
          type: string
          description: Department of the company where the employee belongs to
          enum:
            - DEVELOPMENT
            - TESTING
            - DESIGN
            - MARKETING
            - MAINTENANCE
        emailVerified:
          type: boolean
          description: Tells if the employee's email has been verified
        contractStatus:
          type: string
          description: Contractual status of the employee in the company
          enum:
            - TRAINEE
            - TEMPORAL
            - INDEFINITE
        dateOfBirth:
          type: string
          format: date
          description: Birthdate of the employee
          example: '1997-10-31'
        entryDate:
          type: string
          format: date
          description: The date on which the employee was added to the system
        cancelDate:
          type: string
          format: date
          description: The date on which the employee was deleted from the system
        modifiedDate:
          type: string
          format: date
          description: The date on which employee's data were last modified
      required:
        - employeeId
        - firstName
        - identificationDocumentValue
        - identificationDocumentType
        - nickname
        - password
        - contractStatus

    GetEmployee:
      title: GetEmployee
      type: object
      description: Structure created to return an employee in a get operation.
      properties:
        employee:
            $ref: '#/components/schemas/ItemEmployee'
      
      example:
        employeeId: 1
        firstName: Alice
        surname1: Smith
        surname2: Watterson
        email: alice.smith@gmail.com
        phoneNumber: +34 666 666 666
        identificationDocumentValue: 12345678A
        identificationDocumentType: NIF
        nickname: alice
        password: $2a$10$FRDQgZ83i4/E7Edw6cijIu6lRxiBv5GJu5wD8CiRWC19kYTJLMBRe
        department: DEVELOPMENT
        contractStatus: INDEFINITE
        emailVerified: true
        dateOfBirth: '1997-10-31'
        entryDate: '2019-08-24'

    GetEmployees:
      title: GetEmployees
      type: object
      description: Structure created to return a list of employees in a get operation
      properties:
          data:
            type: array
            description: Field which contains the data returned by the HTTP method
            items: {
              $ref: '#/components/schemas/ItemEmployee'
            }
          pagination:
            type: object
            description: Describes diferent aspects of the pagination
            properties:
              offset:
                type: integer
                description: Number of the page of the response which will be shown
              limit:
                type: integer
                description: Number of results which will be shown in each page of the response
              pageNumber:
                type: integer
                description: Actual page number of the data shown
              totalPages:
                type: integer
                description: Total number of pages found by the operation GET
              totalElements:
                type: integer
                description: Number of results displayed for each page
              links: 
                type: object
                properties:
                  first:
                    type: string
                    format: url
                    description: Link to the first page of the results
                  prev:
                    type: string
                    format: url
                    description: Link to the previous page of the results
                  self:
                    type: string
                    format: url
                    description: Link of the actual page of the results
                  next:
                    type: string
                    format: url
                    description: Link of the next page of the results
                  last:
                    type: string
                    format: url
                    description: Link of the last page of the results
      example:
        data:
          - employeeId: 1
            firstName: Alice
            surname1: Smith
            surname2: Watterson
            email: alice.smith@gmail.com
            phoneNumber: +34 666 666 666
            identificationDocumentValue: 12345678A
            identificationDocumentType: NIF
            nickname: alice
            password: $2a$10$FRDQgZ83i4/E7Edw6cijIu6lRxiBv5GJu5wD8CiRWC19kYTJLMBRe
            department: DEVELOPMENT
            contractStatus: INDEFINITE
            emailVerified: true
            dateOfBirth: '1997-10-31'
            entryDate: '2019-08-24'

          - employeeId: 2
            firstName: Bob
            surname1: Fellow
            surname2: Fellow
            email: bob.fellow@gmail.com
            phoneNumber: 666 66 66 67
            identificationDocumentValue: 12345678A
            identificationDocumentType: NIF
            nickname: bob
            password: $2a$10$FRDQgZ83i4/E7Edw6cijIu6lRxiBv5GJu5wD8CiRWC19kYTJLMBRd
            department: DEVELOPMENT
            contractStatus: INDEFINITE
            emailVerified: true
            dateOfBirth: '1997-10-31'
            entryDate: '2019-08-24'
        
        pagination:
          offset: 0
          limit: 2
          actualPage: 1
          totalPages: 2
          totalElements: 4

    PostPutEmployee:
      title: PostPutEmployee
      type: object
      description: Structure created to create a new employee with a post operation or editing an existing one with a put operation.
      example:
        firstName: Alice
        surname1: Smith
        surname2: Watterson
        email: alice.smith@gmail.com
        phoneNumber: +34 666 666 666
        identificationDocumentValue: 12345678A
        identificationDocumentType: NIF
        nickname: alice
        password: $2a$10$FRDQgZ83i4/E7Edw6cijIu6lRxiBv5GJu5wD8CiRWC19kYTJLMBRe
        department: DEVELOPMENT
        contractStatus: INDEFINITE
        emailVerified: true
        dateOfBirth: '1997-10-31'
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: Name of the employee
        surname1:
          type: string
          minLength: 1
          maxLength: 50
          description: First surname of the employee 
        surname2:
          type: string
          minLength: 1
          maxLength: 50
          description: Second surname of the employee 
        email:
          type: string
          format: email
          description: Main email adress of the employee
        phoneNumber:
          type: string
          pattern: '^(\+34|0034|34)?[ -]*(6|7)[ -]*([0-9][ -]*){8}$'
          description: Main phone number of the employee
        identificationDocumentValue:
          type: string
          pattern: '^(X(-|\.)?0?\d{7}(-|\.)?[A-Z]|[A-Z](-|\.)?\d{7}(-|\.)?[0-9A-Z]|\d{8}(-|\.)?[A-Z])|[A-z0-9]{2,3}[0-9]{6}$'
          description: Identification document value of the employee
        identificationDocumentType:
          type: string
          enum:
            - NIF
            - NIE
            - PASSPORT
          description: Type of identification document of the employee
        nickname:
          type: string
          description: Nickname used by the employee to login in the system of the company
        password:
          type: string
          format: password
          description: Password used by the employee to login in the system of the company
        department:
          type: string
          description: Department of the company where the employee belongs to
          enum:
            - DEVELOPMENT
            - TESTING
            - DESIGN
            - MARKETING
            - MAINTENANCE
        emailVerified:
          type: boolean
          description: Tells if the employee's email has been verified
        contractStatus:
          type: string
          description: Contractual status of the employee in the company
          enum:
            - TRAINEE
            - TEMPORAL
            - INDEFINITE
        dateOfBirth:
          type: string
          format: date
          description: Birthdate of the employee
          example: '1997-10-31'
      required:
        - firstName
        - identificationDocumentValue
        - identificationDocumentType
        - nickname
        - password

    ErrorMessage:
      title: ErrorMessage
      type: object
      description: Object returned when an error happens
      properties:
        code: 
          type: string
          description: Field which briefly defines the problem
        message:
          type: string
          description: Message which describes the main issue
        type: 
          type: string
          description: Describes the type of message displayed
          enum:
            - ERROR
            - WARNING
            - INFO
        description:
          type: string
          description: Describes other details of the error
      example:
        code: invalidParameters
        message: There are invalid parameters in the request
        type: ERROR
        description: 'Address is not valid. Invalid character: ''@'''
      required:
        - code
        - message
        - type
      
        

        